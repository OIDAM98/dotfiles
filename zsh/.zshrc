export ZSH="$HOME/.oh-my-zsh"
export EDITOR="hx"
export SUDO_EDITOR=$(which hx)
export ZELLIJ_AUTO_ATTACH=true
export LC_ALL="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export TERM="xterm-256color"
export NVM_DIR="$HOME/.nvm"
export GOPATH=$HOME/go
export XDG_CONFIG_HOME="$HOME/.config"
export BR_INSTALL="no"

zsh_plugins=${ZDOTDIR:-~}/.zsh_plugins

[[ -f ${zsh_plugins}.txt ]] || touch ${zsh_plugins}.txt

fpath=(~/.antidote/functions $fpath)


autoload -Uz antidote

# Generate a new static file whenever .zsh_plugins.txt is updated.
if [[ ! ${zsh_plugins}.zsh -nt ${zsh_plugins}.txt ]]; then
  antidote bundle <${zsh_plugins}.txt >|${zsh_plugins}.zsh
fi

# Source your static plugins file.
source ${zsh_plugins}.zsh

### OS Default ###
if [ -z "$XDG_CONFIG_HOME" ] ; then
    export XDG_CONFIG_HOME="$HOME/.config"
fi
if [ -z "$XDG_DATA_HOME" ] ; then
    export XDG_DATA_HOME="$HOME/.local/share"
fi
if [ -z "$XDG_CACHE_HOME" ] ; then
    export XDG_CACHE_HOME="$HOME/.cache"
fi

### PATH ###
if [ -d "/usr/local/bin" ] ;
    then PATH="/usr/local/bin:$PATH"
fi

if [ -d "$HOME/.emacs.d/bin" ] ;
    then PATH="$HOME/.emacs.d/bin:$PATH"
fi

if [ -d  "$HOME/.local/bin" ] ; 
    then PATH="$HOME/.local/bin:$PATH"
fi

if [ -d  "$HOME/bin" ] ; 
    then PATH="$HOME/bin:$PATH"
fi

if [ -d  "$HOME/.cargo/bin" ] ; 
    then PATH="$HOME/.cargo/bin:$PATH"
fi

source ~/.antidote/antidote.zsh

antidote load

# User configuration

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Set personal aliases, overriding those provided by oh-my-zsh libs,

alias zshreload="source ~/.zshrc"
alias ls="eza -l --color=always --group-directories-first"
alias l="eza -l --color=always --group-directories-first"
alias la="eza -alh --color=always --group-directories-first"
alias ll='eza -l --color=always --group-directories-first'  # long format
alias tree='eza -aT --color=always --group-directories-first' # tree listing
alias df="df -h"
alias free="free -h"
alias docker-status='docker ps -a --format "table{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.RunningFor}}\t{{.State}}"'
alias plugins="antidote bundle <~/.zsh_plugins.txt >~/.zsh_plugins.zsh"
alias lg="lazygit"
alias ..="cd .."

# Check if the current terminal is Kitty
if [ -n "$KITTY_WINDOW_ID" ]; then
  # Define a shell function named 'ssh' that overrides the default command
    export TERM="xterm-kitty"
fi

# 
# Check if the current terminal is Kitty
if [ -n "$KITTY_WINDOW_ID" ]; then
  # Define a shell function named 'ssh' that overrides the default command
  ssh() {
    # Check if 'kitty' is available in the PATH
    if command -v kitty >/dev/null 2>&1; then
      # Use the 'command' built-in to run the 'kitty' executable found in the PATH.
      command kitty +kitten ssh "$@"
    else
      # Fallback to the system's default ssh command if kitty is not found
      command ssh "$@"
    fi
  }
fi

YAZI_TERM=""
if [ -n "$YAZI_LEVEL" ]; then
	YAZI_TERM=" Yazi term!: "
fi
PS1="$PS1$YAZI_TERM"

# =============================================================================
#
# Utility function for broot (br).
# 
# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
}

# =============================================================================
#
# Utility functions for zoxide.
#

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
function __zoxide_pwd() {
    \builtin pwd -L
}

# cd + custom logic based on the value of _ZO_ECHO.
function __zoxide_cd() {
    # shellcheck disable=SC2164
    \builtin cd -- "$@"
}

# =============================================================================
#
# Hook configuration for zoxide.
#

# Hook to add new entries to the database.
function __zoxide_hook() {
    # shellcheck disable=SC2312
    \command zoxide add -- "$(__zoxide_pwd)"
}

# Initialize hook.
# shellcheck disable=SC2154
if [[ ${precmd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]] && [[ ${chpwd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]]; then
    chpwd_functions+=(__zoxide_hook)
fi

# =============================================================================
#
# When using zoxide with --no-cmd, alias these internal functions as desired.
#

# Jump to a directory using only keywords.
function __zoxide_z() {
    # shellcheck disable=SC2199
    if [[ "$#" -eq 0 ]]; then
        __zoxide_cd ~
    elif [[ "$#" -eq 1 ]] && { [[ -d "$1" ]] || [[ "$1" = '-' ]] || [[ "$1" =~ ^[-+][0-9]$ ]]; }; then
        __zoxide_cd "$1"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" && __zoxide_cd "${result}"
    fi
}

# Jump to a directory using interactive search.
function __zoxide_zi() {
    \builtin local result
    result="$(\command zoxide query --interactive -- "$@")" && __zoxide_cd "${result}"
}

# =============================================================================
#
# Commands for zoxide. Disable these using --no-cmd.
#

function cd() {
    __zoxide_z "$@"
}

function cdi() {
    __zoxide_zi "$@"
}

# Completions.
if [[ -o zle ]]; then
    __zoxide_result=''

    function __zoxide_z_complete() {
        # Only show completions when the cursor is at the end of the line.
        # shellcheck disable=SC2154
        [[ "${#words[@]}" -eq "${CURRENT}" ]] || return 0

        if [[ "${#words[@]}" -eq 2 ]]; then
            # Show completions for local directories.
            _files -/
        elif [[ "${words[-1]}" == '' ]]; then
            # Show completions for Space-Tab.
            # shellcheck disable=SC2086
            __zoxide_result="$(\command zoxide query --exclude "$(__zoxide_pwd || \builtin true)" --interactive -- ${words[2,-1]})" || __zoxide_result=''

            # Bind '\e[0n' to helper function.
            \builtin bindkey '\e[0n' '__zoxide_z_complete_helper'
            # Send '\e[0n' to console input.
            \builtin printf '\e[5n'
        fi

        # Report that the completion was successful, so that we don't fall back
        # to another completion function.
        return 0
    }

    function __zoxide_z_complete_helper() {
        if [[ -n "${__zoxide_result}" ]]; then
            # shellcheck disable=SC2034,SC2296
            BUFFER="cd ${(q-)__zoxide_result}"
            \builtin zle reset-prompt
            \builtin zle accept-line
        else
            \builtin zle reset-prompt
        fi
    }
    \builtin zle -N __zoxide_z_complete_helper

    [[ "${+functions[compdef]}" -ne 0 ]] && \compdef __zoxide_z_complete cd
fi

# =============================================================================
#
# To initialize zoxide, add this to your configuration (usually ~/.zshrc):
#

[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm

eval "$(zoxide init zsh)"
eval "$(starship init zsh)"
eval "$(zellij setup --generate-auto-start zsh)"
# This block sets up the Homebrew environment dynamically.
# It checks for the OS and then attempts to find the correct path to 'brew'.

# Determine the operating system.
OS_NAME="$(uname -s)"

# Set the potential Homebrew path based on the OS.
if [ "$OS_NAME" = "Darwin" ]; then
  # For macOS, check both possible Homebrew installation paths.
  if [ -f "/opt/homebrew/bin/brew" ]; then
    BREW_PATH="/opt/homebrew/bin/brew"
  elif [ -f "/usr/local/bin/brew" ]; then
    BREW_PATH="/usr/local/bin/brew"
  fi
elif [ "$OS_NAME" = "Linux" ]; then
  # For Linux, check the standard Linuxbrew installation path.
  if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    BREW_PATH="/home/linuxbrew/.linuxbrew/bin/brew"
  fi
fi

# If we found a valid path to brew, run 'shellenv' to set up the environment.
if [ -n "$BREW_PATH" ]; then
  eval "$($BREW_PATH shellenv)"
fi

# Add Homebrew completion directory to fpath if Homebrew is installed
if [ -n "$BREW_PATH" ]; then
  fpath+="$BREW_PATH/share/zsh/site-functions"
fi

# This sets the FZF_ALT_C_COMMAND variable to an empty string,
# which disables the Alt-C key binding for fuzzy-finding directories.
export FZF_ALT_C_COMMAND=""

# This sources the fzf script and sets up all the key bindings and
# completion functions in your Zsh shell.
source <(fzf --zsh)
