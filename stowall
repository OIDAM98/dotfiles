#!/usr/bin/env bash

set -e # Exit immediately if a command exits with a non-zero status

DOTFILES="${HOME}/dotfiles"
TARGET_HOME="${HOME}"
TARGET_CONFIG="${HOME}/.config"

echo "Starting Stow process for dotfiles packages..."
echo "---"

# Ensure the target ~/.config directory exists.
mkdir -p "${TARGET_CONFIG}"

# Iterate through each top-level package folder in your dotfiles directory
for package_path in "${DOTFILES}"/*; do
  package_name="$(basename "${package_path}")"

  # Skip if not a directory, or if it's special Git/Stow internal folders
  if ! [ -d "${package_path}" ] || \
     [ "${package_name}" = "." ] || \
     [ "${package_name}" = ".." ] || \
     [ "${package_name}" = ".git" ] || \
     [[ "${package_name}" == ".stow-global-ignore" ]]; then
    continue
  fi

  echo "== Processing package: ${package_name} =="

  # Using a temporary file to pass the boolean flag out of the subshell
  TEMP_FLAG_FILE=$(mktemp)
  trap "rm -f ${TEMP_FLAG_FILE}" EXIT # Ensure cleanup even on script exit

  found_existing_target_persisted="" # Initialize the variable

  # Find all potential files/directories within the package that Stow would manage
  find "${package_path}" -mindepth 1 -print0 | while IFS= read -r -d $'\0' item_source_path; do
    # Get the path of the item relative to the package root
    relative_path="${item_source_path#${package_path}/}"

    # Skip files Stow ignores
    if [[ "$(basename "${relative_path}")" == ".stow-local-ignore" ]] || \
       [[ "$(basename "${relative_path}")" == "README"* ]] || \
       [[ "$(basename "${relative_path}")" == "LICENSE"* ]]; then
      continue
    fi

    # Construct the final destination path.
    target_item_path="${TARGET_HOME}/${relative_path}"

    # Check if a file or symlink already exists at the target location
    if [ -e "${target_item_path}" ]; then
      echo "  - Found existing target: ${target_item_path}"
      echo "true" > "${TEMP_FLAG_FILE}"
      break # Found one, no need to check further for this package
    fi
  done
  
  # Read the flag value back from the temporary file
  if [ -s "${TEMP_FLAG_FILE}" ]; then
    found_existing_target_persisted="true"
  fi
  rm -f "${TEMP_FLAG_FILE}" # Clean up the temp file

  # --- Perform stow if any existing target was found ---
  if [ "${found_existing_target_persisted}" == "true" ]; then
    echo "Stowing package: ${package_name}..."
    stow -d "${DOTFILES}" -t "${TARGET_HOME}" --adopt --restow --no-folding --verbose=1 "${package_name}"
    echo "Package '${package_name}' stowed successfully."
  else
    echo "Skipping package '${package_name}': No corresponding existing target found."
  fi
  echo "---"

done

echo "Stowing process complete."
